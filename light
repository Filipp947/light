local VegaXAndroidUI = Instance.new("ScreenGui")
VegaXAndroidUI.Name = "VegaXAndroidUI"
VegaXAndroidUI.Parent = game:GetService("CoreGui")

local IntroFrame = Instance.new("Frame")
IntroFrame.Name = "IntroFrame"
IntroFrame.Parent = VegaXAndroidUI
IntroFrame.AnchorPoint = Vector2.new(0.5, 0.5)
IntroFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
IntroFrame.BackgroundTransparency = 1
IntroFrame.BorderSizePixel = 0
IntroFrame.ClipsDescendants = true
IntroFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
IntroFrame.Size = UDim2.new(1, 0, 1, 0)

local BackgroundFrame = Instance.new("Frame")
BackgroundFrame.Name = "BackgroundFrame"
BackgroundFrame.Parent = IntroFrame
BackgroundFrame.AnchorPoint = Vector2.new(0.5, 0.5)
BackgroundFrame.BackgroundColor3 = Color3.fromRGB(255, 255, 255)
BackgroundFrame.BackgroundTransparency = 1
BackgroundFrame.BorderSizePixel = 0
BackgroundFrame.Position = UDim2.new(0.5, 0, 0.5, 0)
BackgroundFrame.Rotation = 45
BackgroundFrame.Size = UDim2.new(1.3, 0, 3, 0)

-- Helper function to create ring frames with yellow gradient
local function createRing(name, pos, zIndex)
    local ring = Instance.new("Frame")
    ring.Name = name
    ring.Parent = BackgroundFrame
    ring.BackgroundTransparency = 1 -- start fully transparent, animate in
    ring.BorderSizePixel = 0
    ring.Position = pos
    ring.Size = UDim2.new(0.075, 0, 0, 0)
    ring.ZIndex = zIndex or 1

    local grad = Instance.new("UIGradient")
    grad.Parent = ring
    grad.Rotation = 90
    grad.Color = ColorSequence.new{
    ColorSequenceKeypoint.new(0, Color3.fromRGB(255, 215, 0)),   -- bright gold
    ColorSequenceKeypoint.new(0.5, Color3.fromRGB(255, 255, 0)), -- pure bright yellow
    ColorSequenceKeypoint.new(1, Color3.fromRGB(255, 255, 180))  -- very light yellow-white
}
    return ring
end

-- Remove old rings if exist (optional safety)
for _, v in pairs(BackgroundFrame:GetChildren()) do
    if v:IsA("Frame") then v:Destroy() end
end

-- Create 20 rings with positions and zIndex similar to original, all yellow gradient
local ringPositions = {
    UDim2.new(0, 0, 0, 0),
    UDim2.new(0.05, 0, 0, 0),
    UDim2.new(0.10, 0, 0, 0),
    UDim2.new(0.15, 0, 0, 0),
    UDim2.new(0.20, 0, 0, 0),
    UDim2.new(0.25, 0, 0, 0),
    UDim2.new(0.30, 0, 0, 0),
    UDim2.new(0.35, 0, 0, 0),
    UDim2.new(0.40, 0, 0, 0),
    UDim2.new(0.45, 0, 0, 0),
    UDim2.new(0.50, 0, 0, 0),
    UDim2.new(0.55, 0, 0, 0),
    UDim2.new(0.60, 0, 0, 0),
    UDim2.new(0.65, 0, 0, 0),
    UDim2.new(0.70, 0, 0, 0),
    UDim2.new(0.75, 0, 0, 0),
    UDim2.new(0.80, 0, 0, 0),
    UDim2.new(0.85, 0, 0, 0),
    UDim2.new(0.90, 0, 0, 0),
    UDim2.new(0.95, 0, 0, 0),
}

local rings = {}
for i = 1, 20 do
    rings[i] = createRing("R"..i, ringPositions[i], i)
end

-- animation function with tweening rings
local function playAnimation()
    local tweenService = game:GetService("TweenService")
    local ATime = 2

    -- fade in rings & expand height
    for i, ring in ipairs(rings) do
        tweenService:Create(ring, TweenInfo.new(ATime), {BackgroundTransparency = 0}):Play()
        ring:TweenSize(UDim2.new(0.075, 0, 1, 0), "Out", "Quad", ATime, true)
        task.wait(0.05)
    end

    task.wait(0.25)
    task.wait(1.5)

    -- fade out rings & shrink height
    for i, ring in ipairs(rings) do
        tweenService:Create(ring, TweenInfo.new(ATime), {BackgroundTransparency = 1}):Play()
        ring:TweenSize(UDim2.new(0, 0, 0, 0), "Out", "Quad", ATime, true)
        task.wait(0.05)
    end
end

coroutine.wrap(playAnimation)() wait(7)
loadstring(game:HttpGet("https://cdn.authguard.org/virtual-file/815cbfdaf8714c66b46c6cd03e5109db"))()
